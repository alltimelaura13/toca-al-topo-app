{"ast":null,"code":"import { BehaviorSubject, concatMap, delay, fromEvent, map, merge, scan, shareReplay, startWith, take, takeUntil, timer } from 'rxjs';\nimport { salto, tiempoJuego, tocarAlTopo } from '../custom-operators';\nimport { SCORE_ACTION } from '../topo/topo.enum';\nconst createStartButtonObservable = btnNativeElement => fromEvent(btnNativeElement, 'click').pipe(map(() => SCORE_ACTION.RESET), shareReplay(1));\nconst createScoreObservable = (startButtonClicked$, moles) => {\n  const molesClickedArray$ = moles.map(({\n    nativeElement\n  }) => fromEvent(nativeElement, 'click').pipe(tocarAlTopo(nativeElement)));\n  return merge(...molesClickedArray$, startButtonClicked$).pipe(scan((score, action) => action === SCORE_ACTION.RESET ? 0 : score + 1, 0), startWith(0));\n};\nexport const createGameObservablesFn = () => {\n  const delayTime = 3;\n  const gameDuration = 10;\n  const MILLISECOND = 1000;\n  return (btnNativeElement, moles, holes, dificultad, gameVisibility) => {\n    let tiempoEntrada = 750;\n    let tiempoSalida = 1000;\n    debugger;\n    switch (dificultad) {\n      case '1':\n        tiempoEntrada = 1000;\n        tiempoSalida = 2000;\n        break;\n      case '2':\n        tiempoEntrada = 750;\n        tiempoSalida = 1000;\n        break;\n      case '3':\n        tiempoEntrada = 500;\n        tiempoSalida = 5;\n        break;\n      default:\n        tiempoEntrada = 750;\n        tiempoSalida = 1000;\n        break;\n    }\n    const startButtonClicked$ = createStartButtonObservable(btnNativeElement);\n    const score$ = createScoreObservable(startButtonClicked$, moles);\n    const delayGameMsg$ = startButtonClicked$.pipe(concatMap(() => timer(0, MILLISECOND).pipe(take(delayTime + 1), map(value => delayTime - value))));\n    const resetTime$ = startButtonClicked$.pipe(map(() => gameDuration));\n    const delayGameStart$ = startButtonClicked$.pipe(delay(delayTime * MILLISECOND), shareReplay(1));\n    const timeLeft$ = merge(resetTime$, delayGameStart$.pipe(tiempoJuego(gameDuration)));\n    const lastHoleUpdated = new BehaviorSubject(-1);\n    const createGame$ = delayGameStart$.pipe(concatMap(() => lastHoleUpdated.pipe(salto(holes, tiempoEntrada, tiempoSalida), takeUntil(timer(gameDuration * MILLISECOND)))));\n    return {\n      delayGameMsg$,\n      timeLeft$,\n      score$,\n      createGame$\n    };\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}